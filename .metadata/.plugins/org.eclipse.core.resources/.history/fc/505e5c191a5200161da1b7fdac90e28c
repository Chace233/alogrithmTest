package webcollector;		


import cn.edu.hfut.dmic.webcollector.model.CrawlDatums;
import cn.edu.hfut.dmic.webcollector.model.Page;
import cn.edu.hfut.dmic.webcollector.plugin.berkeley.BreadthCrawler;
import cn.edu.hfut.dmic.webcollector.util.JsoupUtils;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.json.JSONObject;
import org.jsoup.Connection;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

public class KrCrawler2 extends BreadthCrawler {
    public KrCrawler2(String crawlPath, boolean autoParse) {
	    super(crawlPath, autoParse);
	    this.addSeed("http://36kr.com");
	    this.addRegex("http://36kr.com/p/.*html");
	    this.addRegex("-.*\\.(jpg|png|gif).*");
	    this.addRegex("-.*#.*");
    }

    @Override
    public void visit(Page page, CrawlDatums next) {
    	ArrayList<String> list = Functions.getUrls(page.getHtml(), "http://36kr.com/p/.*?html");
    	
    	//参数的意义依次是，当前的URL，当前获取到的列表，需要点击加载跟多次数
    	//没有改动太多就加了个函数
    	//解释下函数的意思，有些网站会做爬虫的防止，短时间大量访问会封IP之类的。
    	//Functions.MAX_CLICK_TIMES 最大点击加载更多的次数，默认32，按需设置
    	//Functions.ENABLE_AJAX_SLEEP 是否模拟点击睡眠，默认false，按需设置
    	//Functions.AJAX_SLEEP_TIME  每次模拟点击睡眠时长，默认10ms，单位ms，按需更改
    	Functions.patcOf36Kr(page.getUrl(), list, 2);
    	
    	System.out.println(list);
    	for(String url : list){
    		try {
				try {
					JsoupConnect(url);
				} catch (ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
    	}
    }
    
    
    
    public void JsoupConnect(String url) throws IOException, ClassNotFoundException, SQLException{
    	Document doc = null;
    	String res = htmlunitTest.preloading(url);
    	doc = Jsoup.parse(res);
    	String title = doc.select("h1").text();
    	System.out.println("title: "+title);
    	//String auther = doc.select("span.name").text();
    	String content = doc.select(".textblock").text();
    	System.out.println("auther: "+content);
    	//��ȡͼƬ
    	//WriteInDB.writeInDB_36kr(title, content);
    	Elements imgs = doc.select("div[class=mobile_article] img"); //�ҵ� <img ��ǩ
    	for(Element img : imgs){
    		String src = img.attr("src");
    		if(Functions.RegexUrl(src, "http://.*heading")){  //判断是否是文章内的图片（文章内的图片都是以!heading结尾）
    			Functions.downloadImg(src);
    		}
    	}
    	
    }
    
    
    public static void main(String[] args) throws Exception {
    	KrCrawler2 crawler = new KrCrawler2("crawl", true);
	    crawler.setThreads(50);
	    crawler.setTopN(20);
	    crawler.start(4);
    }

}

